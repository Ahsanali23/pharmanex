// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pharmacy_pos.Data;

#nullable disable

namespace Pharmacy_pos.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Pharmacy_pos.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Pharmacy_pos.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Pharmacy_pos.Models.InventoryLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChangeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("InventoryLogs");
                });

            modelBuilder.Entity("Pharmacy_pos.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Pharmacy_pos.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Module = "User",
                            Name = "User.Add"
                        },
                        new
                        {
                            Id = 2,
                            Module = "User",
                            Name = "User.Edit"
                        },
                        new
                        {
                            Id = 3,
                            Module = "User",
                            Name = "User.Delete"
                        },
                        new
                        {
                            Id = 31,
                            Module = "User",
                            Name = "User.Get"
                        },
                        new
                        {
                            Id = 4,
                            Module = "Role",
                            Name = "Role.Add"
                        },
                        new
                        {
                            Id = 5,
                            Module = "Role",
                            Name = "Role.Edit"
                        },
                        new
                        {
                            Id = 6,
                            Module = "Role",
                            Name = "Role.Delete"
                        },
                        new
                        {
                            Id = 32,
                            Module = "Role",
                            Name = "Role.Get"
                        },
                        new
                        {
                            Id = 7,
                            Module = "Customer",
                            Name = "Customer.Add"
                        },
                        new
                        {
                            Id = 8,
                            Module = "Customer",
                            Name = "Customer.Edit"
                        },
                        new
                        {
                            Id = 9,
                            Module = "Customer",
                            Name = "Customer.Delete"
                        },
                        new
                        {
                            Id = 33,
                            Module = "Customer",
                            Name = "Customer.Get"
                        },
                        new
                        {
                            Id = 10,
                            Module = "Product",
                            Name = "Product.Add"
                        },
                        new
                        {
                            Id = 11,
                            Module = "Product",
                            Name = "Product.Edit"
                        },
                        new
                        {
                            Id = 12,
                            Module = "Product",
                            Name = "Product.Delete"
                        },
                        new
                        {
                            Id = 34,
                            Module = "Product",
                            Name = "Product.Get"
                        },
                        new
                        {
                            Id = 13,
                            Module = "Category",
                            Name = "Category.Add"
                        },
                        new
                        {
                            Id = 14,
                            Module = "Category",
                            Name = "Category.Edit"
                        },
                        new
                        {
                            Id = 15,
                            Module = "Category",
                            Name = "Category.Delete"
                        },
                        new
                        {
                            Id = 35,
                            Module = "Category",
                            Name = "Category.Get"
                        },
                        new
                        {
                            Id = 16,
                            Module = "Supplier",
                            Name = "Supplier.Add"
                        },
                        new
                        {
                            Id = 17,
                            Module = "Supplier",
                            Name = "Supplier.Edit"
                        },
                        new
                        {
                            Id = 18,
                            Module = "Supplier",
                            Name = "Supplier.Delete"
                        },
                        new
                        {
                            Id = 36,
                            Module = "Supplier",
                            Name = "Supplier.Get"
                        },
                        new
                        {
                            Id = 19,
                            Module = "Purchase",
                            Name = "Purchase.Add"
                        },
                        new
                        {
                            Id = 20,
                            Module = "Purchase",
                            Name = "Purchase.Edit"
                        },
                        new
                        {
                            Id = 21,
                            Module = "Purchase",
                            Name = "Purchase.Delete"
                        },
                        new
                        {
                            Id = 37,
                            Module = "Purchase",
                            Name = "Purchase.Get"
                        },
                        new
                        {
                            Id = 22,
                            Module = "Sale",
                            Name = "Sale.Add"
                        },
                        new
                        {
                            Id = 23,
                            Module = "Sale",
                            Name = "Sale.Edit"
                        },
                        new
                        {
                            Id = 24,
                            Module = "Sale",
                            Name = "Sale.Delete"
                        },
                        new
                        {
                            Id = 38,
                            Module = "Sale",
                            Name = "Sale.Get"
                        },
                        new
                        {
                            Id = 25,
                            Module = "Quotation",
                            Name = "Quotation.Add"
                        },
                        new
                        {
                            Id = 26,
                            Module = "Quotation",
                            Name = "Quotation.Edit"
                        },
                        new
                        {
                            Id = 27,
                            Module = "Quotation",
                            Name = "Quotation.Delete"
                        },
                        new
                        {
                            Id = 39,
                            Module = "Quotation",
                            Name = "Quotation.Get"
                        },
                        new
                        {
                            Id = 28,
                            Module = "Return",
                            Name = "Return.Add"
                        },
                        new
                        {
                            Id = 29,
                            Module = "Return",
                            Name = "Return.Edit"
                        },
                        new
                        {
                            Id = 30,
                            Module = "Return",
                            Name = "Return.Delete"
                        },
                        new
                        {
                            Id = 40,
                            Module = "Return",
                            Name = "Return.Get"
                        },
                        new
                        {
                            Id = 41,
                            Module = "Report",
                            Name = "Report.View"
                        });
                });

            modelBuilder.Entity("Pharmacy_pos.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlertQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Pharmacy_pos.Models.Purchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("InvoiceNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UserId");

                    b.ToTable("Purchase");
                });

            modelBuilder.Entity("Pharmacy_pos.Models.PurchaseItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseId");

                    b.ToTable("PurchaseItem");
                });

            modelBuilder.Entity("Pharmacy_pos.Models.Quotation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("QuotationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UserId");

                    b.ToTable("Quotations");
                });

            modelBuilder.Entity("Pharmacy_pos.Models.QuotationItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("QuotationId")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("QuotationId");

                    b.ToTable("QuotationItems");
                });

            modelBuilder.Entity("Pharmacy_pos.Models.Return", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReferenceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Returns");
                });

            modelBuilder.Entity("Pharmacy_pos.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Super administrator with all permissions",
                            Name = "SuperAdmin"
                        });
                });

            modelBuilder.Entity("Pharmacy_pos.Models.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermission");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            PermissionId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            Id = -2,
                            PermissionId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            Id = -3,
                            PermissionId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            Id = -4,
                            PermissionId = 31,
                            RoleId = 1
                        },
                        new
                        {
                            Id = -5,
                            PermissionId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            Id = -6,
                            PermissionId = 5,
                            RoleId = 1
                        },
                        new
                        {
                            Id = -7,
                            PermissionId = 6,
                            RoleId = 1
                        },
                        new
                        {
                            Id = -8,
                            PermissionId = 32,
                            RoleId = 1
                        },
                        new
                        {
                            Id = -9,
                            PermissionId = 7,
                            RoleId = 1
                        },
                        new
                        {
                            Id = -10,
                            PermissionId = 8,
                            RoleId = 1
                        },
                        new
                        {
                            Id = -11,
                            PermissionId = 9,
                            RoleId = 1
                        },
                        new
                        {
                            Id = -12,
                            PermissionId = 33,
                            RoleId = 1
                        },
                        new
                        {
                            Id = -13,
                            PermissionId = 10,
                            RoleId = 1
                        },
                        new
                        {
                            Id = -14,
                            PermissionId = 11,
                            RoleId = 1
                        },
                        new
                        {
                            Id = -15,
                            PermissionId = 12,
                            RoleId = 1
                        },
                        new
                        {
                            Id = -16,
                            PermissionId = 34,
                            RoleId = 1
                        },
                        new
                        {
                            Id = -17,
                            PermissionId = 13,
                            RoleId = 1
                        },
                        new
                        {
                            Id = -18,
                            PermissionId = 14,
                            RoleId = 1
                        },
                        new
                        {
                            Id = -19,
                            PermissionId = 15,
                            RoleId = 1
                        },
                        new
                        {
                            Id = -20,
                            PermissionId = 35,
                            RoleId = 1
                        },
                        new
                        {
                            Id = -21,
                            PermissionId = 16,
                            RoleId = 1
                        },
                        new
                        {
                            Id = -22,
                            PermissionId = 17,
                            RoleId = 1
                        },
                        new
                        {
                            Id = -23,
                            PermissionId = 18,
                            RoleId = 1
                        },
                        new
                        {
                            Id = -24,
                            PermissionId = 36,
                            RoleId = 1
                        },
                        new
                        {
                            Id = -25,
                            PermissionId = 19,
                            RoleId = 1
                        },
                        new
                        {
                            Id = -26,
                            PermissionId = 20,
                            RoleId = 1
                        },
                        new
                        {
                            Id = -27,
                            PermissionId = 21,
                            RoleId = 1
                        },
                        new
                        {
                            Id = -28,
                            PermissionId = 37,
                            RoleId = 1
                        },
                        new
                        {
                            Id = -29,
                            PermissionId = 22,
                            RoleId = 1
                        },
                        new
                        {
                            Id = -30,
                            PermissionId = 23,
                            RoleId = 1
                        },
                        new
                        {
                            Id = -31,
                            PermissionId = 24,
                            RoleId = 1
                        },
                        new
                        {
                            Id = -32,
                            PermissionId = 38,
                            RoleId = 1
                        },
                        new
                        {
                            Id = -33,
                            PermissionId = 25,
                            RoleId = 1
                        },
                        new
                        {
                            Id = -34,
                            PermissionId = 26,
                            RoleId = 1
                        },
                        new
                        {
                            Id = -35,
                            PermissionId = 27,
                            RoleId = 1
                        },
                        new
                        {
                            Id = -36,
                            PermissionId = 39,
                            RoleId = 1
                        },
                        new
                        {
                            Id = -37,
                            PermissionId = 28,
                            RoleId = 1
                        },
                        new
                        {
                            Id = -38,
                            PermissionId = 29,
                            RoleId = 1
                        },
                        new
                        {
                            Id = -39,
                            PermissionId = 30,
                            RoleId = 1
                        },
                        new
                        {
                            Id = -40,
                            PermissionId = 40,
                            RoleId = 1
                        },
                        new
                        {
                            Id = -41,
                            PermissionId = 41,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Pharmacy_pos.Models.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("InvoiceNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UserId");

                    b.ToTable("Sale");
                });

            modelBuilder.Entity("Pharmacy_pos.Models.SaleItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SaleId")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleId");

                    b.ToTable("SaleItem");
                });

            modelBuilder.Entity("Pharmacy_pos.Models.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("Pharmacy_pos.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "superadmin@pharmacy.com",
                            Name = "SuperAdmin",
                            Password = "$2a$11$sM9wvXwUTvk.of/NhyQ1BO.BCHuUONz5.2wxAQo2l7sC4z4BC6Onm",
                            RoleId = 1,
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("Pharmacy_pos.Models.InventoryLog", b =>
                {
                    b.HasOne("Pharmacy_pos.Models.Product", "Product")
                        .WithMany("InventoryLogs")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pharmacy_pos.Models.User", "User")
                        .WithMany("InventoryLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pharmacy_pos.Models.Notification", b =>
                {
                    b.HasOne("Pharmacy_pos.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pharmacy_pos.Models.Product", b =>
                {
                    b.HasOne("Pharmacy_pos.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Pharmacy_pos.Models.Purchase", b =>
                {
                    b.HasOne("Pharmacy_pos.Models.Supplier", "Supplier")
                        .WithMany("Purchases")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pharmacy_pos.Models.User", "User")
                        .WithMany("Purchases")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pharmacy_pos.Models.PurchaseItem", b =>
                {
                    b.HasOne("Pharmacy_pos.Models.Product", "Product")
                        .WithMany("PurchaseItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pharmacy_pos.Models.Purchase", "Purchase")
                        .WithMany("PurchaseItems")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("Pharmacy_pos.Models.Quotation", b =>
                {
                    b.HasOne("Pharmacy_pos.Models.Customer", "Customer")
                        .WithMany("Quotations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pharmacy_pos.Models.User", "User")
                        .WithMany("Quotations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pharmacy_pos.Models.QuotationItem", b =>
                {
                    b.HasOne("Pharmacy_pos.Models.Product", "Product")
                        .WithMany("QuotationItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pharmacy_pos.Models.Quotation", "Quotation")
                        .WithMany("QuotationItems")
                        .HasForeignKey("QuotationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Quotation");
                });

            modelBuilder.Entity("Pharmacy_pos.Models.Return", b =>
                {
                    b.HasOne("Pharmacy_pos.Models.Product", "Product")
                        .WithMany("Returns")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Pharmacy_pos.Models.RolePermission", b =>
                {
                    b.HasOne("Pharmacy_pos.Models.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pharmacy_pos.Models.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Pharmacy_pos.Models.Sale", b =>
                {
                    b.HasOne("Pharmacy_pos.Models.Customer", "Customer")
                        .WithMany("Sales")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pharmacy_pos.Models.User", "User")
                        .WithMany("Sales")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pharmacy_pos.Models.SaleItem", b =>
                {
                    b.HasOne("Pharmacy_pos.Models.Product", "Product")
                        .WithMany("SaleItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pharmacy_pos.Models.Sale", "Sale")
                        .WithMany("SaleItems")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Pharmacy_pos.Models.User", b =>
                {
                    b.HasOne("Pharmacy_pos.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Pharmacy_pos.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Pharmacy_pos.Models.Customer", b =>
                {
                    b.Navigation("Quotations");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("Pharmacy_pos.Models.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Pharmacy_pos.Models.Product", b =>
                {
                    b.Navigation("InventoryLogs");

                    b.Navigation("PurchaseItems");

                    b.Navigation("QuotationItems");

                    b.Navigation("Returns");

                    b.Navigation("SaleItems");
                });

            modelBuilder.Entity("Pharmacy_pos.Models.Purchase", b =>
                {
                    b.Navigation("PurchaseItems");
                });

            modelBuilder.Entity("Pharmacy_pos.Models.Quotation", b =>
                {
                    b.Navigation("QuotationItems");
                });

            modelBuilder.Entity("Pharmacy_pos.Models.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Pharmacy_pos.Models.Sale", b =>
                {
                    b.Navigation("SaleItems");
                });

            modelBuilder.Entity("Pharmacy_pos.Models.Supplier", b =>
                {
                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("Pharmacy_pos.Models.User", b =>
                {
                    b.Navigation("InventoryLogs");

                    b.Navigation("Notifications");

                    b.Navigation("Purchases");

                    b.Navigation("Quotations");

                    b.Navigation("Sales");
                });
#pragma warning restore 612, 618
        }
    }
}
